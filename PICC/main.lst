MPASM

CCS PCB C Compiler, Version 5.008, 5967               15-12-13 06:08

               Filename:   Z:\Documents\Code_Workspaces\workspace_vlsi\4_2_Term_Final\PICC\main.lst

               ROM used:   97 words (5%)
                           Largest free fragment is 512
               RAM used:   10 (42%) at main() level
                           12 (50%) worst case
               Stack used: 1 locations
               Stack size: 2

0000 0A29       00001 GOTO   029
0001 0A02       00002 GOTO   002
07FF 0A00       00003 GOTO   000
                00004 .................... #include <16c57.h> 
                00005 .................... //////// Standard Header file for the PIC16C57 device //////////////// 
                00006 .................... #device PIC16C57 
0002 0068       00007 CLRF   08
0003 0069       00008 CLRF   09
0004 0213       00009 MOVF   13,W
0005 0403       00010 BCF    03.0
0006 0614       00011 BTFSC  14.0
0007 01E8       00012 ADDWF  08,F
0008 0328       00013 RRF    08,F
0009 0329       00014 RRF    09,F
000A 0634       00015 BTFSC  14.1
000B 01E8       00016 ADDWF  08,F
000C 0328       00017 RRF    08,F
000D 0329       00018 RRF    09,F
000E 0654       00019 BTFSC  14.2
000F 01E8       00020 ADDWF  08,F
0010 0328       00021 RRF    08,F
0011 0329       00022 RRF    09,F
0012 0674       00023 BTFSC  14.3
0013 01E8       00024 ADDWF  08,F
0014 0328       00025 RRF    08,F
0015 0329       00026 RRF    09,F
0016 0694       00027 BTFSC  14.4
0017 01E8       00028 ADDWF  08,F
0018 0328       00029 RRF    08,F
0019 0329       00030 RRF    09,F
001A 06B4       00031 BTFSC  14.5
001B 01E8       00032 ADDWF  08,F
001C 0328       00033 RRF    08,F
001D 0329       00034 RRF    09,F
001E 06D4       00035 BTFSC  14.6
001F 01E8       00036 ADDWF  08,F
0020 0328       00037 RRF    08,F
0021 0329       00038 RRF    09,F
0022 06F4       00039 BTFSC  14.7
0023 01E8       00040 ADDWF  08,F
0024 0328       00041 RRF    08,F
0025 0329       00042 RRF    09,F
0026 04A3       00043 BCF    03.5
0027 04C3       00044 BCF    03.6
0028 0A48       00045 GOTO   048 (RETURN)
                00046 ....................  
                00417 .................... #list 
                00418 ....................  
                00419 ....................  
                00420 .................... #define ARRAY_LENGTH (5) 
                00421 ....................  
                00422 .................... #define write(addr, data) (*(unsigned char *) addr) = data 
                00423 .................... #define read(addr) (*(unsigned char *) addr) 
                00424 ....................  
                00425 .................... #define PORTA (0x05) 
                00426 .................... #define PORTB (0x06) 
                00427 .................... #define PORTC (0x07) 
                00428 ....................  
                00429 .................... /* 
                00430 .................... int main() { 
                00431 ....................    unsigned char array[ARRAY_LENGTH] = { 35, 2, 15, 5, 20 }; 
                00432 ....................  
                00433 ....................    int i; 
                00434 ....................    int j; 
                00435 ....................    int temp; 
                00436 ....................     
                00437 ....................    int arrayLen = 5; 
                00438 ....................     
                00439 ....................    //configure port b as output 
                00440 .................... #asm 
                00441 ....................    MOVLW 0x00 
                00442 ....................    TRIS PORTA 
                00443 ....................    TRIS PORTB 
                00444 ....................    TRIS PORTC 
                00445 .................... #endasm 
                00446 ....................  
                00447 ....................    //before sort 
                00448 ....................    for (i = 0; i < arrayLen; i++) { 
                00449 ....................       write(PORTA, 0x01); 
                00450 ....................       write(PORTB, array[i]); 
                00451 ....................       write(PORTA, 0x0F); 
                00452 ....................    } 
                00453 ....................     
                00454 ....................    for (i = 0; i < arrayLen - 1; i++) { 
                00455 ....................       for (j = 1; j < arrayLen - i; j++) { 
                00456 ....................          if (array[j - 1] > array[j]) { 
                00457 ....................             temp = array[j - 1]; 
                00458 ....................             array[j - 1] = array[j]; 
                00459 ....................             array[j] = temp; 
                00460 ....................          } 
                00461 ....................       } 
                00462 ....................    } 
                00463 ....................  
                00464 ....................    //after sort 
                00465 ....................    for (i = 0; i < arrayLen; i++) { 
                00466 ....................       write(PORTA, 0x01); 
                00467 ....................       write(PORTB, array[i]); 
                00468 ....................       write(PORTA, 0x0F); 
                00469 ....................    } 
                00470 ....................  
                00471 ....................    return 0; 
                00472 .................... } 
                00473 .................... */ 
                00474 ....................  
                00475 .................... #define SIGNAL_READY (0x1) 
                00476 .................... #define SIGNAL_BUSY  (0x4) 
                00477 .................... #define SIGNAL_RESULT (0xF) 
                00478 ....................  
                00479 .................... int main() { 
0029 006E       00480 CLRF   0E
002A 006D       00481 CLRF   0D
002B 0C0D       00482 MOVLW  0D
002C 0032       00483 MOVWF  12
                00484 ....................  
                00485 ....................    //note that sum is 16-bit 
                00486 ....................    int16 sum = 0; 
                00487 ....................    int i; 
                00488 ....................    int8 val1; 
                00489 ....................    int8 val2; 
                00490 ....................     
                00491 ....................    unsigned char *dat = &sum; 
                00492 ....................     
                00493 ....................    //int arrayLen = 5; 
                00494 ....................     
                00495 .................... #asm 
                00496 ....................    //configure port a as output 
                00497 ....................    MOVLW 0x0 
002D 0C00       00498 MOVLW  00
                00499 ....................    TRIS PORTA 
002E 0005       00500 TRIS   5
                00501 ....................     
                00502 ....................    //configure port b, c as input 
                00503 ....................    MOVLW 0xFF 
002F 0CFF       00504 MOVLW  FF
                00505 ....................    TRIS PORTB 
0030 0006       00506 TRIS   6
                00507 ....................    TRIS PORTC 
0031 0007       00508 TRIS   7
                00509 .................... #endasm 
                00510 ....................  
                00511 ....................    write(PORTA, SIGNAL_READY); 
0032 0C01       00512 MOVLW  01
0033 0025       00513 MOVWF  05
                00514 ....................  
                00515 ....................    for (i = 0; i < 5; ++i) { 
0034 006F       00516 CLRF   0F
0035 0C04       00517 MOVLW  04
0036 0028       00518 MOVWF  08
0037 020F       00519 MOVF   0F,W
0038 0088       00520 SUBWF  08,W
0039 0703       00521 BTFSS  03.0
003A 0A50       00522 GOTO   050
                00523 ....................       write(PORTA, SIGNAL_READY); 
003B 0C01       00524 MOVLW  01
003C 0025       00525 MOVWF  05
                00526 ....................       val1 = read(PORTB); 
003D 0206       00527 MOVF   06,W
003E 0030       00528 MOVWF  10
                00529 ....................       val2 = read(PORTC); 
003F 0207       00530 MOVF   07,W
0040 0031       00531 MOVWF  11
                00532 ....................       write(PORTA, SIGNAL_BUSY); 
0041 0C04       00533 MOVLW  04
0042 0025       00534 MOVWF  05
                00535 ....................        
                00536 ....................       sum += _mul(val1, val2); 
0043 0210       00537 MOVF   10,W
0044 0033       00538 MOVWF  13
0045 0211       00539 MOVF   11,W
0046 0034       00540 MOVWF  14
0047 0A01       00541 GOTO   001
0048 0209       00542 MOVF   09,W
0049 01ED       00543 ADDWF  0D,F
004A 0208       00544 MOVF   08,W
004B 0603       00545 BTFSC  03.0
004C 03C8       00546 INCFSZ 08,W
004D 01EE       00547 ADDWF  0E,F
004E 02AF       00548 INCF   0F,F
004F 0A35       00549 GOTO   035
                00550 ....................    } 
                00551 ....................     
                00552 ....................    write(PORTA, SIGNAL_RESULT); 
0050 0C0F       00553 MOVLW  0F
0051 0025       00554 MOVWF  05
                00555 ....................     
                00556 .................... #asm 
                00557 ....................    //configure port b, c as output 
                00558 ....................    MOVLW 0x00 
0052 0C00       00559 MOVLW  00
                00560 ....................    TRIS PORTB 
0053 0006       00561 TRIS   6
                00562 ....................    TRIS PORTC 
0054 0007       00563 TRIS   7
                00564 .................... #endasm 
                00565 ....................  
                00566 ....................    write(PORTB, dat[1]); 
0055 0C01       00567 MOVLW  01
0056 01D2       00568 ADDWF  12,W
0057 0024       00569 MOVWF  04
0058 0200       00570 MOVF   00,W
0059 0026       00571 MOVWF  06
                00572 ....................    write(PORTC, dat[0]); 
005A 0212       00573 MOVF   12,W
005B 0024       00574 MOVWF  04
005C 0200       00575 MOVF   00,W
005D 0027       00576 MOVWF  07
                00577 ....................    write(PORTA, SIGNAL_READY); 
005E 0C01       00578 MOVLW  01
005F 0025       00579 MOVWF  05
                00580 ....................  
                00581 ....................    return 0; 
0060 0C00       00582 MOVLW  00
0061 0029       00583 MOVWF  09
                00584 .................... } 
                00585 ....................  
0062 0003       0586 SLEEP

Configuration Fuses:
   Word  1: 0FFB   RC NOWDT NOPROTECT

SYMBOL TABLE
  LABEL                             VALUE

_RETURN_                          00000009
main.sum                          0000000D
main.i                            0000000F
main.val1                         00000010
main.val2                         00000011
main.dat                          00000012
Allocation:                       0000EEEF
main                              00000000

MEMORY USAGE
