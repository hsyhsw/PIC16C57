MPASM

CCS PCB C Compiler, Version 5.008, 5967               03-12-13 19:28

               Filename:   C:\Users\ghksw_000\Desktop\drag\innerproduct.lst

               ROM used:   113 words (6%)
                           Largest free fragment is 512
               RAM used:   20 (83%) at main() level
                           22 (92%) worst case
               Stack used: 1 locations
               Stack size: 2

0000 0A29       00001 GOTO   029
0001 0A02       00002 GOTO   002
07FF 0A00       00003 GOTO   000
                00004 .................... #include <16c57.h> 
                00005 .................... //////// Standard Header file for the PIC16C57 device //////////////// 
                00006 .................... #device PIC16C57 
0002 0068       00007 CLRF   08
0003 0069       00008 CLRF   09
0004 021D       00009 MOVF   1D,W
0005 0403       00010 BCF    03.0
0006 061E       00011 BTFSC  1E.0
0007 01E8       00012 ADDWF  08,F
0008 0328       00013 RRF    08,F
0009 0329       00014 RRF    09,F
000A 063E       00015 BTFSC  1E.1
000B 01E8       00016 ADDWF  08,F
000C 0328       00017 RRF    08,F
000D 0329       00018 RRF    09,F
000E 065E       00019 BTFSC  1E.2
000F 01E8       00020 ADDWF  08,F
0010 0328       00021 RRF    08,F
0011 0329       00022 RRF    09,F
0012 067E       00023 BTFSC  1E.3
0013 01E8       00024 ADDWF  08,F
0014 0328       00025 RRF    08,F
0015 0329       00026 RRF    09,F
0016 069E       00027 BTFSC  1E.4
0017 01E8       00028 ADDWF  08,F
0018 0328       00029 RRF    08,F
0019 0329       00030 RRF    09,F
001A 06BE       00031 BTFSC  1E.5
001B 01E8       00032 ADDWF  08,F
001C 0328       00033 RRF    08,F
001D 0329       00034 RRF    09,F
001E 06DE       00035 BTFSC  1E.6
001F 01E8       00036 ADDWF  08,F
0020 0328       00037 RRF    08,F
0021 0329       00038 RRF    09,F
0022 06FE       00039 BTFSC  1E.7
0023 01E8       00040 ADDWF  08,F
0024 0328       00041 RRF    08,F
0025 0329       00042 RRF    09,F
0026 04A3       00043 BCF    03.5
0027 04C3       00044 BCF    03.6
0028 0A5B       00045 GOTO   05B (RETURN)
                00046 ....................  
                00417 .................... #list 
                00418 ....................  
                00419 ....................  
                00420 .................... #define ARRAY_LENGTH (5) 
                00421 ....................  
                00422 .................... #define write(addr, data) (*(unsigned char *) addr) = data 
                00423 ....................  
                00424 .................... #define PORTA (0x05) 
                00425 .................... #define PORTB (0x06) 
                00426 .................... #define PORTC (0x07) 
                00427 ....................  
                00428 .................... /* 
                00429 .................... int main() { 
                00430 ....................    unsigned char array[ARRAY_LENGTH] = { 35, 2, 15, 5, 20 }; 
                00431 ....................  
                00432 ....................    int i; 
                00433 ....................    int j; 
                00434 ....................    int temp; 
                00435 ....................     
                00436 ....................    int arrayLen = 5; 
                00437 ....................     
                00438 ....................    //configure port b as output 
                00439 .................... #asm 
                00440 ....................    MOVLW 0x00 
                00441 ....................    TRIS PORTA 
                00442 ....................    TRIS PORTB 
                00443 ....................    TRIS PORTC 
                00444 .................... #endasm 
                00445 ....................  
                00446 ....................    //before sort 
                00447 ....................    for (i = 0; i < arrayLen; i++) { 
                00448 ....................       write(PORTA, 0x01); 
                00449 ....................       write(PORTB, array[i]); 
                00450 ....................       write(PORTA, 0x0F); 
                00451 ....................    } 
                00452 ....................     
                00453 ....................    for (i = 0; i < arrayLen - 1; i++) { 
                00454 ....................       for (j = 1; j < arrayLen - i; j++) { 
                00455 ....................          if (array[j - 1] > array[j]) { 
                00456 ....................             temp = array[j - 1]; 
                00457 ....................             array[j - 1] = array[j]; 
                00458 ....................             array[j] = temp; 
                00459 ....................          } 
                00460 ....................       } 
                00461 ....................    } 
                00462 ....................  
                00463 ....................    //after sort 
                00464 ....................    for (i = 0; i < arrayLen; i++) { 
                00465 ....................       write(PORTA, 0x01); 
                00466 ....................       write(PORTB, array[i]); 
                00467 ....................       write(PORTA, 0x0F); 
                00468 ....................    } 
                00469 ....................  
                00470 ....................    return 0; 
                00471 .................... } 
                00472 .................... */ 
                00473 ....................  
                00474 ....................  
                00475 .................... int main() { 
003D 0078       00476 CLRF   18
003E 0077       00477 CLRF   17
003F 0C17       00478 MOVLW  17
0040 003A       00479 MOVWF  1A
                00480 ....................    int array1[ARRAY_LENGTH] = { 50, 4, 3, 2, 1 }; 
0029 0C32       00481 MOVLW  32
002A 002D       00482 MOVWF  0D
002B 0C04       00483 MOVLW  04
002C 002E       00484 MOVWF  0E
002D 0C03       00485 MOVLW  03
002E 002F       00486 MOVWF  0F
002F 0C02       00487 MOVLW  02
0030 0030       00488 MOVWF  10
0031 0C01       00489 MOVLW  01
0032 0031       00490 MOVWF  11
                00491 ....................    int array2[ARRAY_LENGTH] = { 10, 9, 8, 7, 6 }; 
0033 0C0A       00492 MOVLW  0A
0034 0032       00493 MOVWF  12
0035 0C09       00494 MOVLW  09
0036 0033       00495 MOVWF  13
0037 0C08       00496 MOVLW  08
0038 0034       00497 MOVWF  14
0039 0C07       00498 MOVLW  07
003A 0035       00499 MOVWF  15
003B 0C06       00500 MOVLW  06
003C 0036       00501 MOVWF  16
                00502 ....................  
                00503 ....................    //note that sum is 16-bit 
                00504 ....................    int16 sum = 0; 
                00505 ....................    int i; 
                00506 ....................     
                00507 ....................    unsigned char *dat = &sum; 
                00508 ....................     
                00509 ....................    //int arrayLen = 5; 
                00510 ....................     
                00511 ....................    //configure port a, b, c as output 
                00512 .................... #asm 
                00513 ....................    MOVLW 0x00 
0041 0C00       00514 MOVLW  00
                00515 ....................    TRIS PORTA 
0042 0005       00516 TRIS   5
                00517 ....................    TRIS PORTB 
0043 0006       00518 TRIS   6
                00519 ....................    TRIS PORTC 
0044 0007       00520 TRIS   7
                00521 .................... #endasm 
                00522 ....................  
                00523 ....................    for (i = 0; i < ARRAY_LENGTH; ++i) { 
0045 0079       00524 CLRF   19
0046 0C04       00525 MOVLW  04
0047 0028       00526 MOVWF  08
0048 0219       00527 MOVF   19,W
0049 0088       00528 SUBWF  08,W
004A 0703       00529 BTFSS  03.0
004B 0A63       00530 GOTO   063
                00531 ....................       // 8x8 multiplication 
                00532 ....................       sum += _mul(array1[i], array2[i]); 
004C 0C0D       00533 MOVLW  0D
004D 01D9       00534 ADDWF  19,W
004E 0024       00535 MOVWF  04
004F 0200       00536 MOVF   00,W
0050 003B       00537 MOVWF  1B
0051 0C12       00538 MOVLW  12
0052 01D9       00539 ADDWF  19,W
0053 0024       00540 MOVWF  04
0054 0200       00541 MOVF   00,W
0055 003C       00542 MOVWF  1C
0056 021B       00543 MOVF   1B,W
0057 003D       00544 MOVWF  1D
0058 021C       00545 MOVF   1C,W
0059 003E       00546 MOVWF  1E
005A 0A01       00547 GOTO   001
005B 0209       00548 MOVF   09,W
005C 01F7       00549 ADDWF  17,F
005D 0208       00550 MOVF   08,W
005E 0603       00551 BTFSC  03.0
005F 03C8       00552 INCFSZ 08,W
0060 01F8       00553 ADDWF  18,F
0061 02B9       00554 INCF   19,F
0062 0A46       00555 GOTO   046
                00556 ....................    } 
                00557 ....................     
                00558 ....................    write(PORTA, 0x01); 
0063 0C01       00559 MOVLW  01
0064 0025       00560 MOVWF  05
                00561 ....................    write(PORTB, dat[1]); 
0065 0C01       00562 MOVLW  01
0066 01DA       00563 ADDWF  1A,W
0067 0024       00564 MOVWF  04
0068 0200       00565 MOVF   00,W
0069 0026       00566 MOVWF  06
                00567 ....................    write(PORTC, dat[0]); 
006A 021A       00568 MOVF   1A,W
006B 0024       00569 MOVWF  04
006C 0200       00570 MOVF   00,W
006D 0027       00571 MOVWF  07
                00572 ....................    write(PORTA, 0x0F); 
006E 0C0F       00573 MOVLW  0F
006F 0025       00574 MOVWF  05
                00575 ....................  
                00576 ....................    return 0; 
0070 0C00       00577 MOVLW  00
0071 0029       00578 MOVWF  09
                00579 .................... } 
                00580 ....................  
0072 0003       0581 SLEEP

Configuration Fuses:
   Word  1: 0FFB   RC NOWDT NOPROTECT

SYMBOL TABLE
  LABEL                             VALUE

_RETURN_                          00000009
main.array1                       0000000D
main.array2                       00000012
main.sum                          00000017
main.i                            00000019
main.dat                          0000001A
Allocation:                       0000EEEF
main                              00000000

MEMORY USAGE
